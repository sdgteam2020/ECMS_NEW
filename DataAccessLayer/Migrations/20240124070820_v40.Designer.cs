// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240124070820_v40")]
    partial class v40
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataTransferObject.Domain.Error.Error", b =>
                {
                    b.Property<int>("ErrorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ErrorId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Values")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ErrorId");

                    b.ToTable("Errors");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Identitytable.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("DataTransferObject.Domain.Identitytable.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("AdminFlag")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AdminFlagDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AdminMsg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DomainId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Fd1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fd2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("Updatedby")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DataTransferObject.Domain.MUserProfile", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("ArmyNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("DialingCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<bool>("IntOffr")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCO")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIO")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<short>("RankId")
                        .HasColumnType("smallint");

                    b.Property<string>("Thumbprint")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<int?>("Updatedby")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("RankId");

                    b.HasIndex("Updatedby");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MApplyFor", b =>
                {
                    b.Property<byte>("ApplyForId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("ApplyForId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("ApplyForId");

                    b.ToTable("MApplyFor");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MAppointment", b =>
                {
                    b.Property<short>("ApptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("ApptId"));

                    b.Property<string>("AppointmentName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedOn")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<int?>("Updatedby")
                        .HasColumnType("int");

                    b.HasKey("ApptId");

                    b.HasIndex("Updatedby");

                    b.ToTable("MAppointment");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MArmedCat", b =>
                {
                    b.Property<byte>("ArmedCatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("ArmedCatId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Order")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdatedOn")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<int?>("Updatedby")
                        .HasColumnType("int");

                    b.HasKey("ArmedCatId");

                    b.HasIndex("Updatedby");

                    b.ToTable("MArmedCats");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MArmedType", b =>
                {
                    b.Property<byte>("ArmedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("ArmedId"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<byte>("ArmedCatId")
                        .HasColumnType("tinyint");

                    b.Property<string>("ArmedName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("FlagInf")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedOn")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<int?>("Updatedby")
                        .HasColumnType("int");

                    b.HasKey("ArmedId");

                    b.HasIndex("ArmedCatId");

                    b.HasIndex("Updatedby");

                    b.ToTable("MArmedType");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MBde", b =>
                {
                    b.Property<byte>("BdeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("BdeId"));

                    b.Property<string>("BdeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("ComdId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("CorpsId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("DivId")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedOn")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<int?>("Updatedby")
                        .HasColumnType("int");

                    b.HasKey("BdeId");

                    b.HasIndex("ComdId");

                    b.HasIndex("CorpsId");

                    b.HasIndex("DivId");

                    b.HasIndex("Updatedby");

                    b.ToTable("MBde");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MBloodGroup", b =>
                {
                    b.Property<int>("BloodGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodGroupId"));

                    b.Property<string>("BloodGroup")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BloodGroupId");

                    b.ToTable("MBloodGroup");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MComd", b =>
                {
                    b.Property<byte>("ComdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("ComdId"));

                    b.Property<string>("ComdAbbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ComdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Orderby")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<int?>("Updatedby")
                        .HasColumnType("int");

                    b.HasKey("ComdId");

                    b.HasIndex("Updatedby");

                    b.ToTable("MComd");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MCorps", b =>
                {
                    b.Property<byte>("CorpsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("CorpsId"));

                    b.Property<byte>("ComdId")
                        .HasColumnType("tinyint");

                    b.Property<string>("CorpsName")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedOn")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<int?>("Updatedby")
                        .HasColumnType("int");

                    b.HasKey("CorpsId");

                    b.HasIndex("ComdId");

                    b.HasIndex("Updatedby");

                    b.ToTable("MCorps");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MDiv", b =>
                {
                    b.Property<byte>("DivId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("DivId"));

                    b.Property<byte>("ComdId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("CorpsId")
                        .HasColumnType("tinyint");

                    b.Property<string>("DivName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedOn")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<int?>("Updatedby")
                        .HasColumnType("int");

                    b.HasKey("DivId");

                    b.HasIndex("ComdId");

                    b.HasIndex("CorpsId");

                    b.HasIndex("Updatedby");

                    b.ToTable("MDiv");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MFmnBranches", b =>
                {
                    b.Property<byte>("FmnBranchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("FmnBranchID"));

                    b.Property<string>("Abvr")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<int?>("Updatedby")
                        .HasColumnType("int");

                    b.HasKey("FmnBranchID");

                    b.HasIndex("Updatedby");

                    b.ToTable("MFmnBranches");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MFormation", b =>
                {
                    b.Property<byte>("FormationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("FormationId"));

                    b.Property<string>("FormationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedOn")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<int?>("Updatedby")
                        .HasColumnType("int");

                    b.HasKey("FormationId");

                    b.HasIndex("Updatedby");

                    b.ToTable("MFormation");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MICardType", b =>
                {
                    b.Property<byte>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("TypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeId");

                    b.ToTable("MICardType");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MMappingProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GSOId")
                        .HasColumnType("int");

                    b.Property<int>("IOId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<int?>("Updatedby")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Updatedby");

                    b.ToTable("MMappingProfile");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MPSO", b =>
                {
                    b.Property<byte>("PsoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("PsoId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("PSOAbvr")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PSOName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<int?>("Updatedby")
                        .HasColumnType("int");

                    b.HasKey("PsoId");

                    b.HasIndex("Updatedby");

                    b.ToTable("MPso");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MPostingReason", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MPostingReason");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MRank", b =>
                {
                    b.Property<short>("RankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("RankId"));

                    b.Property<byte>("ApplyForId")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<short>("Orderby")
                        .HasColumnType("smallint");

                    b.Property<string>("RankAbbreviation")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("RankName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<int?>("Updatedby")
                        .HasColumnType("int");

                    b.Property<int?>("rank_cd")
                        .HasColumnType("int");

                    b.HasKey("RankId");

                    b.HasIndex("ApplyForId");

                    b.HasIndex("Updatedby");

                    b.ToTable("MRank");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MRegimental", b =>
                {
                    b.Property<byte>("RegId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("RegId"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<byte>("ArmedId")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<int?>("Updatedby")
                        .HasColumnType("int");

                    b.HasKey("RegId");

                    b.HasIndex("ArmedId");

                    b.HasIndex("Updatedby");

                    b.ToTable("MRegimental");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MRegistration", b =>
                {
                    b.Property<byte>("RegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("RegistrationId"));

                    b.Property<int>("ApplyForId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<int?>("Updatedby")
                        .HasColumnType("int");

                    b.HasKey("RegistrationId");

                    b.HasIndex("Updatedby");

                    b.ToTable("MRegistration");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MRemarkType", b =>
                {
                    b.Property<byte>("RemarkTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("RemarkTypeId"));

                    b.Property<string>("RemarksType")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("RemarkTypeId");

                    b.ToTable("MRemarkType");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MRemarks", b =>
                {
                    b.Property<byte>("RemarksId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("RemarksId"));

                    b.Property<byte>("RemarkApplyId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("RemarkTypeId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("RemarksId");

                    b.HasIndex("RemarkApplyId");

                    b.HasIndex("RemarkTypeId");

                    b.ToTable("MRemarks");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MRemarksApply", b =>
                {
                    b.Property<byte>("RemarkApplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("RemarkApplyId"));

                    b.Property<string>("RemarksApply")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("RemarkApplyId");

                    b.ToTable("MRemarksApply");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MStepCounterStep", b =>
                {
                    b.Property<byte>("StepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("StepId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StepId");

                    b.ToTable("MStepCounterStep");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MSubDte", b =>
                {
                    b.Property<byte>("SubDteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("SubDteId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("SubDteAbvr")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("SubDteName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<int?>("Updatedby")
                        .HasColumnType("int");

                    b.HasKey("SubDteId");

                    b.HasIndex("Updatedby");

                    b.ToTable("MSubDte");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MTrnFwdType", b =>
                {
                    b.Property<byte>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("TypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeId");

                    b.ToTable("MFwdType");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MUnit", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitId"));

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerify")
                        .HasColumnType("bit");

                    b.Property<string>("Suffix")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char(1)");

                    b.Property<string>("Sus_no")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<short?>("UnregdUserId")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("UpdatedOn")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<int?>("Updatedby")
                        .HasColumnType("int");

                    b.HasKey("UnitId");

                    b.HasIndex("UnregdUserId");

                    b.HasIndex("Updatedby");

                    b.ToTable("MUnit");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MapUnit", b =>
                {
                    b.Property<int>("UnitMapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitMapId"));

                    b.Property<byte>("BdeId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("ComdId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("CorpsId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("DivId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("FmnBranchID")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte>("PsoId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("SubDteId")
                        .HasColumnType("tinyint");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("UnitType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<int?>("Updatedby")
                        .HasColumnType("int");

                    b.HasKey("UnitMapId");

                    b.HasIndex("BdeId");

                    b.HasIndex("ComdId");

                    b.HasIndex("CorpsId");

                    b.HasIndex("DivId");

                    b.HasIndex("FmnBranchID");

                    b.HasIndex("PsoId");

                    b.HasIndex("SubDteId");

                    b.HasIndex("UnitId");

                    b.HasIndex("Updatedby");

                    b.ToTable("MapUnit");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Model.BasicDetail", b =>
                {
                    b.Property<int>("BasicDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BasicDetailId"));

                    b.Property<byte>("ApplyForId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("ArmedId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateOfCommissioning")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateOfIssue")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("IssuingAuth")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PaperIcardNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PlaceOfIssue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<short>("RankId")
                        .HasColumnType("smallint");

                    b.Property<byte?>("RegimentalId")
                        .HasColumnType("tinyint");

                    b.Property<string>("ServiceNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<int?>("Updatedby")
                        .HasColumnType("int");

                    b.HasKey("BasicDetailId");

                    b.HasIndex("ApplyForId");

                    b.HasIndex("ArmedId");

                    b.HasIndex("RankId");

                    b.HasIndex("RegimentalId");

                    b.HasIndex("UnitId");

                    b.HasIndex("Updatedby");

                    b.ToTable("BasicDetails");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Model.BasicDetailTemp", b =>
                {
                    b.Property<int>("BasicDetailTempId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BasicDetailTempId"));

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfCommissioning")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Observations")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PermanentAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RemarksIds")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ServiceNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<int?>("Updatedby")
                        .HasColumnType("int");

                    b.HasKey("BasicDetailTempId");

                    b.HasIndex("Updatedby");

                    b.ToTable("BasicDetailTemps");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Model.DocUpload", b =>
                {
                    b.Property<int>("DocUploadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocUploadId"));

                    b.Property<string>("DocName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedOn")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<int?>("Updatedby")
                        .HasColumnType("int");

                    b.HasKey("DocUploadId");

                    b.HasIndex("Updatedby");

                    b.ToTable("DocUploads");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Model.MApiData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Pers_Army_No")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pers_Blood_Gp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pers_District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pers_Father_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pers_Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pers_Height")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pers_House_no")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pers_Iden_mark_1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pers_Iden_mark_2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pers_Moh_st")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pers_Pin_code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pers_Police_stn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pers_Post_office")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pers_Rank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pers_Regt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pers_State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pers_Tehsil")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pers_UID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pers_Village")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pers_birth_dt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pers_enrol_dt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pers_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MApiData");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Model.MStepCounter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("ApplyForId")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<byte>("StepId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdatedOn")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<int?>("Updatedby")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplyForId");

                    b.HasIndex("RequestId");

                    b.HasIndex("StepId");

                    b.HasIndex("Updatedby");

                    b.ToTable("TrnStepCounter");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Model.MTrnAddress", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<int>("BasicDetailId")
                        .HasColumnType("int");

                    b.Property<string>("District")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("PO")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("PS")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<int?>("PinCode")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Tehsil")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Village")
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("AddressId");

                    b.HasIndex("BasicDetailId");

                    b.ToTable("TrnAddress");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Model.MTrnFwd", b =>
                {
                    b.Property<int>("TrnFwdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrnFwdId"));

                    b.Property<int?>("FromAspNetUsersId")
                        .HasColumnType("int");

                    b.Property<int>("FromUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<int?>("PostingOutId")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RemarksIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("ToAspNetUsersId")
                        .HasColumnType("int");

                    b.Property<int>("ToUserId")
                        .HasColumnType("int");

                    b.Property<byte>("TypeId")
                        .HasColumnType("tinyint");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<int?>("Updatedby")
                        .HasColumnType("int");

                    b.HasKey("TrnFwdId");

                    b.HasIndex("FromAspNetUsersId");

                    b.HasIndex("FromUserId");

                    b.HasIndex("RequestId");

                    b.HasIndex("ToAspNetUsersId");

                    b.HasIndex("ToUserId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UnitId");

                    b.HasIndex("Updatedby");

                    b.ToTable("TrnFwds");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Model.MTrnICardRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<int>("BasicDetailId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte>("RegistrationId")
                        .HasColumnType("tinyint");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<long>("TrackingId")
                        .HasColumnType("bigint");

                    b.Property<int>("TrnDomainMappingId")
                        .HasColumnType("int");

                    b.Property<byte>("TypeId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdatedOn")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<int?>("Updatedby")
                        .HasColumnType("int");

                    b.HasKey("RequestId");

                    b.HasIndex("BasicDetailId");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("TrnDomainMappingId");

                    b.HasIndex("TypeId");

                    b.HasIndex("Updatedby");

                    b.ToTable("TrnICardRequest");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Model.MTrnIdentityInfo", b =>
                {
                    b.Property<int>("InfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InfoId"));

                    b.Property<long>("AadhaarNo")
                        .HasMaxLength(12)
                        .HasColumnType("bigint");

                    b.Property<int>("BasicDetailId")
                        .HasColumnType("int");

                    b.Property<int>("BloodGroupId")
                        .HasColumnType("int");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<string>("IdenMark1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("IdenMark2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("InfoId");

                    b.HasIndex("BasicDetailId");

                    b.ToTable("TrnIdentityInfo");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Model.MTrnNotification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<int>("DisplayId")
                        .HasColumnType("int");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.Property<int>("ReciverAspNetUsersId")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("SentAspNetUsersId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationId");

                    b.HasIndex("DisplayId");

                    b.HasIndex("RequestId");

                    b.ToTable("TrnNotification");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Model.MTrnNotificationDisplay", b =>
                {
                    b.Property<int>("DisplayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DisplayId"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Spanname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("DisplayId");

                    b.ToTable("TrnNotificationDisplay");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Model.MTrnUpload", b =>
                {
                    b.Property<int>("UploadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UploadId"));

                    b.Property<int>("BasicDetailId")
                        .HasColumnType("int");

                    b.Property<string>("PhotoImagePath")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("SignatureImagePath")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("UploadId");

                    b.HasIndex("BasicDetailId");

                    b.ToTable("TrnUpload");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Model.TrnDomainMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<short>("ApptId")
                        .HasColumnType("smallint");

                    b.Property<int>("AspNetUsersId")
                        .HasColumnType("int");

                    b.Property<int?>("MappedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MappedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApptId");

                    b.HasIndex("AspNetUsersId");

                    b.HasIndex("UnitId");

                    b.HasIndex("UserId");

                    b.ToTable("TrnDomainMapping");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Model.TrnPostingOut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Authority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FromAspNetUsersId")
                        .HasColumnType("int");

                    b.Property<int>("FromUnitID")
                        .HasColumnType("int");

                    b.Property<int>("FromUserID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte>("ReasonId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("SOSDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ToAspNetUsersId")
                        .HasColumnType("int");

                    b.Property<int>("ToUnitID")
                        .HasColumnType("int");

                    b.Property<int>("ToUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<int?>("Updatedby")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromAspNetUsersId");

                    b.HasIndex("FromUnitID");

                    b.HasIndex("FromUserID");

                    b.HasIndex("ReasonId");

                    b.HasIndex("ToAspNetUsersId");

                    b.HasIndex("ToUnitID");

                    b.HasIndex("ToUserID");

                    b.HasIndex("Updatedby");

                    b.ToTable("TrnPostingOut");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Model.TrnUnregdUser", b =>
                {
                    b.Property<short>("UnregdUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("UnregdUserId"));

                    b.Property<string>("DialingCode")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("DomainId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Extension")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNo")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ServiceNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("UpdatedOn")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.HasKey("UnregdUserId");

                    b.ToTable("TrnUnregdUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataTransferObject.Domain.MUserProfile", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Master.MRank", "MRank")
                        .WithMany()
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("Updatedby")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdate");

                    b.Navigation("MRank");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MAppointment", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("Updatedby")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdate");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MArmedCat", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("Updatedby")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdate");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MArmedType", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Master.MArmedCat", "ArmedCat")
                        .WithMany()
                        .HasForeignKey("ArmedCatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("Updatedby")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdate");

                    b.Navigation("ArmedCat");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MBde", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Master.MComd", "Comd")
                        .WithMany()
                        .HasForeignKey("ComdId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Master.MCorps", "Corps")
                        .WithMany()
                        .HasForeignKey("CorpsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Master.MDiv", "Div")
                        .WithMany()
                        .HasForeignKey("DivId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("Updatedby")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdate");

                    b.Navigation("Comd");

                    b.Navigation("Corps");

                    b.Navigation("Div");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MComd", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("Updatedby")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdate");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MCorps", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Master.MComd", "Comd")
                        .WithMany()
                        .HasForeignKey("ComdId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("Updatedby")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdate");

                    b.Navigation("Comd");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MDiv", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Master.MComd", "Comd")
                        .WithMany()
                        .HasForeignKey("ComdId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Master.MCorps", "Corps")
                        .WithMany()
                        .HasForeignKey("CorpsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("Updatedby")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdate");

                    b.Navigation("Comd");

                    b.Navigation("Corps");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MFmnBranches", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("Updatedby")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdate");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MFormation", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("Updatedby")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdate");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MMappingProfile", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("Updatedby")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdate");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MPSO", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("Updatedby")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdate");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MRank", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Master.MApplyFor", "MApplyFor")
                        .WithMany()
                        .HasForeignKey("ApplyForId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("Updatedby")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdate");

                    b.Navigation("MApplyFor");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MRegimental", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Master.MArmedType", "MArmedType")
                        .WithMany()
                        .HasForeignKey("ArmedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("Updatedby")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdate");

                    b.Navigation("MArmedType");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MRegistration", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("Updatedby")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdate");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MRemarks", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Master.MRemarksApply", "MRemarksApply")
                        .WithMany()
                        .HasForeignKey("RemarkApplyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Master.MRemarkType", "MRemarkType")
                        .WithMany()
                        .HasForeignKey("RemarkTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MRemarkType");

                    b.Navigation("MRemarksApply");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MSubDte", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("Updatedby")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdate");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MUnit", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Model.TrnUnregdUser", "TrnUnregdUser")
                        .WithMany()
                        .HasForeignKey("UnregdUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("Updatedby")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdate");

                    b.Navigation("TrnUnregdUser");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Master.MapUnit", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Master.MBde", "Bde")
                        .WithMany()
                        .HasForeignKey("BdeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Master.MComd", "Comd")
                        .WithMany()
                        .HasForeignKey("ComdId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Master.MCorps", "Corps")
                        .WithMany()
                        .HasForeignKey("CorpsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Master.MDiv", "Div")
                        .WithMany()
                        .HasForeignKey("DivId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Master.MFmnBranches", "MFmnBranches")
                        .WithMany()
                        .HasForeignKey("FmnBranchID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Master.MPSO", "MPSO")
                        .WithMany()
                        .HasForeignKey("PsoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Master.MSubDte", "MSubDte")
                        .WithMany()
                        .HasForeignKey("SubDteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Master.MUnit", "MUnit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("Updatedby")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdate");

                    b.Navigation("Bde");

                    b.Navigation("Comd");

                    b.Navigation("Corps");

                    b.Navigation("Div");

                    b.Navigation("MFmnBranches");

                    b.Navigation("MPSO");

                    b.Navigation("MSubDte");

                    b.Navigation("MUnit");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Model.BasicDetail", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Master.MApplyFor", "MApplyFor")
                        .WithMany()
                        .HasForeignKey("ApplyForId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Master.MArmedType", "Armed")
                        .WithMany()
                        .HasForeignKey("ArmedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Master.MRank", "Rank")
                        .WithMany()
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Master.MRegimental", "Regimental")
                        .WithMany()
                        .HasForeignKey("RegimentalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataTransferObject.Domain.Master.MapUnit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("Updatedby")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdate");

                    b.Navigation("Armed");

                    b.Navigation("MApplyFor");

                    b.Navigation("Rank");

                    b.Navigation("Regimental");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Model.BasicDetailTemp", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("Updatedby")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdate");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Model.DocUpload", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("Updatedby")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdate");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Model.MStepCounter", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Master.MApplyFor", "MApplyFor")
                        .WithMany()
                        .HasForeignKey("ApplyForId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Model.MTrnICardRequest", "MTrnICardRequest")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Master.MStepCounterStep", "MStepCounterStep")
                        .WithMany()
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("Updatedby")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdate");

                    b.Navigation("MApplyFor");

                    b.Navigation("MStepCounterStep");

                    b.Navigation("MTrnICardRequest");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Model.MTrnAddress", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Model.BasicDetail", "BasicDetail")
                        .WithMany()
                        .HasForeignKey("BasicDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BasicDetail");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Model.MTrnFwd", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("FromAspNetUsersId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataTransferObject.Domain.MUserProfile", "MUserProfileFrom")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Model.MTrnICardRequest", "MTrnICardRequest")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationUser", "ApplicationUser1")
                        .WithMany()
                        .HasForeignKey("ToAspNetUsersId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataTransferObject.Domain.MUserProfile", "MUserProfile")
                        .WithMany()
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Master.MTrnFwdType", "MTrnFwdType")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Master.MapUnit", "MapUnit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("Updatedby")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUser");

                    b.Navigation("ApplicationUser1");

                    b.Navigation("ApplicationUserUpdate");

                    b.Navigation("MTrnFwdType");

                    b.Navigation("MTrnICardRequest");

                    b.Navigation("MUserProfile");

                    b.Navigation("MUserProfileFrom");

                    b.Navigation("MapUnit");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Model.MTrnICardRequest", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Model.BasicDetail", "BasicDetail")
                        .WithMany()
                        .HasForeignKey("BasicDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Master.MRegistration", "Registration")
                        .WithMany()
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Model.TrnDomainMapping", "TrnDomainMapping")
                        .WithMany()
                        .HasForeignKey("TrnDomainMappingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Master.MICardType", "MICardType")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("Updatedby")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdate");

                    b.Navigation("BasicDetail");

                    b.Navigation("MICardType");

                    b.Navigation("Registration");

                    b.Navigation("TrnDomainMapping");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Model.MTrnIdentityInfo", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Model.BasicDetail", "BasicDetail")
                        .WithMany()
                        .HasForeignKey("BasicDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BasicDetail");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Model.MTrnNotification", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Model.MTrnNotificationDisplay", "Display")
                        .WithMany()
                        .HasForeignKey("DisplayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Model.MTrnICardRequest", "MTrnICardRequest")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Display");

                    b.Navigation("MTrnICardRequest");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Model.MTrnUpload", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Model.BasicDetail", "BasicDetail")
                        .WithMany()
                        .HasForeignKey("BasicDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BasicDetail");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Model.TrnDomainMapping", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Master.MAppointment", "MAppointment")
                        .WithMany()
                        .HasForeignKey("ApptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("AspNetUsersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Master.MapUnit", "MapUnit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.MUserProfile", "MUserProfile")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUser");

                    b.Navigation("MAppointment");

                    b.Navigation("MUserProfile");

                    b.Navigation("MapUnit");
                });

            modelBuilder.Entity("DataTransferObject.Domain.Model.TrnPostingOut", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("FromAspNetUsersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Master.MapUnit", "MapUnit")
                        .WithMany()
                        .HasForeignKey("FromUnitID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.MUserProfile", "MUserProfile")
                        .WithMany()
                        .HasForeignKey("FromUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Master.MPostingReason", "MPostingReason")
                        .WithMany()
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationUser", "ToApplicationUser")
                        .WithMany()
                        .HasForeignKey("ToAspNetUsersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Master.MapUnit", "ToMapUnit")
                        .WithMany()
                        .HasForeignKey("ToUnitID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.MUserProfile", "ToMUserProfile")
                        .WithMany()
                        .HasForeignKey("ToUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("Updatedby")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUser");

                    b.Navigation("ApplicationUserUpdate");

                    b.Navigation("MPostingReason");

                    b.Navigation("MUserProfile");

                    b.Navigation("MapUnit");

                    b.Navigation("ToApplicationUser");

                    b.Navigation("ToMUserProfile");

                    b.Navigation("ToMapUnit");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DataTransferObject.Domain.Identitytable.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
