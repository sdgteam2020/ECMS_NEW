<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AadhaarNo" xml:space="preserve">
    <value>AADHAAR No</value>
  </data>
  <data name="Appointment" xml:space="preserve">
    <value>Appointment</value>
  </data>
  <data name="AppointmentName" xml:space="preserve">
    <value>Appointment Name</value>
  </data>
  <data name="ArmService" xml:space="preserve">
    <value>Arm / Service</value>
  </data>
  <data name="ArmyNumber" xml:space="preserve">
    <value>Army Number</value>
  </data>
  <data name="BasicDetailId" xml:space="preserve">
    <value>Id</value>
  </data>
  <data name="Bde" xml:space="preserve">
    <value>Bde.</value>
  </data>
  <data name="BloodGroup" xml:space="preserve">
    <value>Blood Group</value>
  </data>
  <data name="choice" xml:space="preserve">
    <value>Select Choice</value>
  </data>
  <data name="Comd" xml:space="preserve">
    <value>Comd.</value>
  </data>
  <data name="Corps" xml:space="preserve">
    <value>Corps.</value>
  </data>
  <data name="Date" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="DateOfCommissioning" xml:space="preserve">
    <value>Date of Commissioning/ Enrollment</value>
  </data>
  <data name="DateOfIssue" xml:space="preserve">
    <value>Date of Issue</value>
  </data>
  <data name="DistrictId" xml:space="preserve">
    <value>District</value>
  </data>
  <data name="Div" xml:space="preserve">
    <value>Div.</value>
  </data>
  <data name="DOB" xml:space="preserve">
    <value>Date of Birth</value>
  </data>
  <data name="DocName" xml:space="preserve">
    <value>Document Name</value>
  </data>
  <data name="DocPath" xml:space="preserve">
    <value>Upload Word Document</value>
  </data>
  <data name="DocUploadId" xml:space="preserve">
    <value>Id</value>
  </data>
  <data name="DomainId" xml:space="preserve">
    <value>Domain Id</value>
  </data>
  <data name="EmailId" xml:space="preserve">
    <value>Email Id.</value>
  </data>
  <data name="GISAppointment" xml:space="preserve">
    <value>GIS Officer Appointment</value>
  </data>
  <data name="GISName" xml:space="preserve">
    <value>GIS Officer Name</value>
  </data>
  <data name="GISOfficerArmyNumber" xml:space="preserve">
    <value>GIS Rep Officer ArmyNumber</value>
  </data>
  <data name="GISRank" xml:space="preserve">
    <value>GIS Officer Rank</value>
  </data>
  <data name="GISUnitFormation" xml:space="preserve">
    <value>GIS Officer Formation / Unit </value>
  </data>
  <data name="Height" xml:space="preserve">
    <value>Height (Cm)</value>
  </data>
  <data name="IdentityMark" xml:space="preserve">
    <value>Identification Mark</value>
  </data>
  <data name="InitiatingOfficerArmyNumber" xml:space="preserve">
    <value>IO Army No.</value>
  </data>
  <data name="IOAppointment" xml:space="preserve">
    <value>IO Appointment</value>
  </data>
  <data name="IOName" xml:space="preserve">
    <value>IO Name</value>
  </data>
  <data name="IORank" xml:space="preserve">
    <value>IO Rank</value>
  </data>
  <data name="IOUnitFormation" xml:space="preserve">
    <value>IO Formation / Unit </value>
  </data>
  <data name="IssuingAuth" xml:space="preserve">
    <value>Issuing Authority</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Observations" xml:space="preserve">
    <value>Observations</value>
  </data>
  <data name="PermanentAddress" xml:space="preserve">
    <value>Permt Address as per Service Records</value>
  </data>
  <data name="PhotoImagePath" xml:space="preserve">
    <value>BROWSE &amp; UPLOAD PHOTOGRAPH</value>
  </data>
  <data name="Photo_" xml:space="preserve">
    <value>Photo</value>
  </data>
  <data name="PlaceOfIssue" xml:space="preserve">
    <value>Place of Issue</value>
  </data>
  <data name="ProfileDataId" xml:space="preserve">
    <value>Id</value>
  </data>
  <data name="Rank" xml:space="preserve">
    <value>Rank</value>
  </data>
  <data name="RegimentalId" xml:space="preserve">
    <value>Regimental</value>
  </data>
  <data name="RegistrationType" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="RoleName" xml:space="preserve">
    <value>Role Name</value>
  </data>
  <data name="Seniority" xml:space="preserve">
    <value>Seniority</value>
  </data>
  <data name="ServiceNo" xml:space="preserve">
    <value>Army No</value>
  </data>
  <data name="SignatureImagePath" xml:space="preserve">
    <value>Signature of Indl</value>
  </data>
  <data name="Signature_" xml:space="preserve">
    <value>Signature</value>
  </data>
  <data name="Sno" xml:space="preserve">
    <value>S No.</value>
  </data>
  <data name="StateId" xml:space="preserve">
    <value>State</value>
  </data>
  <data name="SubmitType" xml:space="preserve">
    <value>Submit Type</value>
  </data>
  <data name="TermsConditions" xml:space="preserve">
    <value>I HEREBY DECLARE THAT THE DETAILS FURNISHED ABOVE ARE TRUE TO BEST OF MY KNOWLEDGE. I AM FULLY AWARE THAT, DECLARATION OF FALSE INFO IS AN OFFENCE WHICH WOULD MAKE ME LIABLE FOR PUNISHMENT AS PER EXTANT REGULATIONS.</value>
  </data>
  <data name="TypeOfUnit" xml:space="preserve">
    <value>Type Of Unit</value>
  </data>
  <data name="UnitName" xml:space="preserve">
    <value>Unit Name</value>
  </data>
  <data name="UnitSusNo" xml:space="preserve">
    <value>Unit SUS No.</value>
  </data>
  <data name="UserId" xml:space="preserve">
    <value>Created By</value>
  </data>
  <data name="UserName" xml:space="preserve">
    <value>User Name</value>
  </data>
  <data name="UserRole" xml:space="preserve">
    <value>User Role</value>
  </data>
</root>